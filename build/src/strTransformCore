
import { TSReplaceFilter, TSReplacerAllAsync, ISTRHookableTransform, ISHookTO, TSSource } from "./definitions";
import { strTransformHookable } from "./strTransformHookable";

/*
 *
 */
/*
String.prototype.tranform = function (
  src: TSSource,
  defkey: string,
  ukn: TSReplacerAllAsync,
  filterValue: TSReplaceFilter
): Promise<string> {
  return (new strTransformeCore(this + "", src, defkey, ukn, filterValue)).run();
}
*/

/*
 *
 */

export class strTransformeCore extends strTransformHookable {
  constructor(
    private src: TSSource,
    defReplace: string = "",
    ukn: null | TSReplacerAllAsync = null,
    filter: null | TSReplaceFilter = null
  ) {
    super(
      new Array<ISHookTO>(),
      defReplace,
      ukn,
      filter
    );
  }
}





